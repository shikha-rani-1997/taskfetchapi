[{"D:\\bibo\\src\\index.js":"1","D:\\bibo\\src\\reportWebVitals.js":"2","D:\\bibo\\src\\App.js":"3","D:\\bibo\\src\\Imageapi.js":"4"},{"size":467,"mtime":1612519643746,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":1513,"mtime":1612519841853,"results":"8","hashOfConfig":"6"},{"size":1229,"mtime":1612518692878,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1fywbto",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"D:\\bibo\\src\\index.js",[],["22","23"],"D:\\bibo\\src\\reportWebVitals.js",[],"D:\\bibo\\src\\App.js",["24"],"import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport Image from './Imageapi';\n\n\nconst App = () => {\n  \n  const [employees, setEmployees] = useState([]);\n  const [visible, setVisible] = useState(1);\n    useEffect(() => {\n        getData()\n    }, [])\n\n    const getData = async () => {\n\n      const response = await axios.get('https://jsonplaceholder.typicode.com/users');\n      setEmployees(response.data);\n    }\n    const loadMore = () => {\n      setVisible(visible + 1);\n    };\n\n\n    const renderHeader = () => {\n        let headerElement = ['id', 'name', 'email', 'phone', 'operation']\n\n        return headerElement.map((key, index) => {\n            return <th key={index}>{key.toUpperCase()}</th>\n        })\n    }\n\n  const renderBody = (person, index) => {\n    return (\n      <tr >\n        <td>{person.id}</td>\n        <td>{person.name}</td>\n        <td>{person.email}</td>\n        <td>{person.phone}</td>\n        <td><button onClick={loadMore}>Load 1 More</button></td>\n      </tr>\n    );\n  };\n    \n\n    return (\n      <> \n        <Image />\n            <h1 id='title'>React Table</h1>\n            <table id='employee'>\n                <thead>\n                    <tr>{renderHeader()}</tr>\n                </thead>\n                <tbody>\n            {employees.slice(0, visible).map(renderBody)}\n            {visible < employees.length}\n                </tbody>\n            </table>\n        </>\n    )\n}\n\nexport default App;","D:\\bibo\\src\\Imageapi.js",["25","26","27"],"import './App.css';\r\nimport React,{useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios';\r\n\r\nfunction Imageapi() {\r\n  \r\n  const [pics, setpics] = useState(null);\r\n  const fetchData = async () => {\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/photos'\r\n    );\r\n\r\n    setpics(response.data);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Displaying Images in cards</h1>\r\n      <div>\r\n        <button className=\"fetch-button\" onClick={fetchData}>\r\n          Fetch Data\r\n        </button>\r\n        <br />\r\n      </div>\r\n      <div className=\"pics\">\r\n        {pics &&\r\n          pics.map((pic, index) => {\r\n            return (\r\n              <div className=\"pic\" key={index}>\r\n                <h3>Picture {index + 1}</h3>\r\n                <h2>{pic.title}</h2>\r\n\r\n                <div className=\"details\">\r\n                  <img src={pic.url} alt=\"API IMAGE\" />\r\n                  <img src={pic.thumbnailUrl} alt=\"API IMAGE\"/>\r\n                  <p>ALBUM: {pic.albumId}</p>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n          \r\n     \r\n\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Imageapi;",["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":3,"column":8,"nodeType":"36","messageId":"37","endLine":3,"endColumn":16},{"ruleId":"34","severity":1,"message":"35","line":3,"column":8,"nodeType":"36","messageId":"37","endLine":3,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":34,"column":19,"nodeType":"40","endLine":34,"endColumn":56},{"ruleId":"38","severity":1,"message":"39","line":35,"column":19,"nodeType":"40","endLine":35,"endColumn":64},{"ruleId":"30","replacedBy":"41"},{"ruleId":"32","replacedBy":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["43"],["44"],"no-global-assign","no-unsafe-negation"]